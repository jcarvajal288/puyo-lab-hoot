(define-module (update)
  #:pure
  #:use-module (scheme base)
  #:use-module (scheme inexact)
  #:use-module (scheme write)
  #:use-module (hoot match)
  #:use-module (math rect)
  #:use-module (math vector)
  #:use-module (stdlib list)
  #:use-module (gameboard)
  #:use-module (gamestate)
  #:export (move-active-pair!
            start-board-evaluation!
            progress-evaluation!))

(define (move hitbox velocity)
  (set-rect-x! hitbox (+ (rect-x hitbox) (vec2-x velocity)))
  (set-rect-y! hitbox (+ (rect-y hitbox) (vec2-y velocity))))

(define (move-active-pair! direction)
  (if (eqv? current-game-mode 'moving)
    (let* ((i1 active-pair-index1)
          (i2 active-pair-index2)
          (move-result (match direction
                          ('left (move-active-pair-left i1 i2))
                          ('right (move-active-pair-right i1 i2))
                          ('up (move-active-pair-up i1 i2))
                          ('down (move-active-pair-down i1 i2))
                          ('counter-clockwise (rotate-active-pair-counter-clockwise i1 i2))
                          ('clockwise (rotate-active-pair-clockwise i1 i2)))))
      (if (eqv? move-result 'stick-pair)
          (start-board-evaluation!)
          (set-active-pair-location! move-result)))))

(define (move-active-pair-left s1 s2)
  (let ((d1 (- s1 1))
        (d2 (- s2 1)))
    (if (and (on-same-level? s1 d1)
             (on-same-level? s2 d2)
             (space-empty? d1)
             (space-empty? d2))
        (cons d1 d2)
        (cons s1 s2))))

(define (move-active-pair-right s1 s2)
  (let ((d1 (+ s1 1))
        (d2 (+ s2 1)))
    (if (and (on-same-level? s1 d1)
             (on-same-level? s2 d2)
             (space-empty? d1)
             (space-empty? d2))
        (cons d1 d2)
        (cons s1 s2))))

(define (move-active-pair-up s1 s2)
  (let ((d1 (- s1 board-grid-width))
        (d2 (- s2 board-grid-width)))
    (if (and (>= d1 0)
             (>= d2 0)
             (space-empty? d1)
             (space-empty? d2))
        (cons d1 d2)
        (cons s1 s2))))

(define (move-active-pair-down s1 s2)
  (let ((d1 (+ s1 board-grid-width))
        (d2 (+ s2 board-grid-width)))
    (if (and (< d1 board-vector-length)
             (< d2 board-vector-length)
             (space-empty? d1)
             (space-empty? d2))
        (cons d1 d2)
        'stick-pair)))

(define (rotate-active-pair-counter-clockwise s1 s2)
  (define (rotate-right-to-up)
    (let ((d2 (- s1 board-grid-width)))
      (if (>= d2 0) d2 s2)))
  (define (rotate-left-to-down)
    (let ((d2 (+ s1 board-grid-width)))
      (if (< d2 board-vector-length) d2 s2)))
  (define (rotate-down-to-right)
    (let ((d2 (+ s1 1)))
      (if (= (modulo (+ s1 1) board-grid-width) 0) s2 d2)))
  (define (rotate-up-to-left)
    (let ((d2 (- s1 1)))
      (if (= (modulo s1 board-grid-width) 0) s2 d2)))
  (let ((d2 (if (on-same-level? s1 s2)
                (if (< s1 s2)
                    (rotate-right-to-up)
                    (rotate-left-to-down))
                (if (< s1 s2)
                    (rotate-down-to-right)
                    (rotate-up-to-left)))))
    (if (space-empty? d2)
        (cons s1 d2)
        (cons s1 s2))))

(define (rotate-active-pair-clockwise s1 s2)
  (define (rotate-right-to-down)
    (let ((d2 (+ s1 board-grid-width)))
      (if (< d2 board-vector-length) d2 s2)))
  (define (rotate-left-to-up)
    (let ((d2 (- s1 board-grid-width)))
      (if (>= d2 0) d2 s2)))
  (define (rotate-down-to-left)
    (let ((d2 (- s1 1)))
      (if (= (modulo s1 board-grid-width) 0) s2 d2)))
  (define (rotate-up-to-right)
    (let ((d2 (+ s1 1)))
      (if (= (modulo (+ s1 1) board-grid-width) 0) s2 d2)))
  (let ((d2 (if (on-same-level? s1 s2)
                (if (< s1 s2)
                    (rotate-right-to-down)
                    (rotate-left-to-up))
                (if (< s1 s2)
                    (rotate-down-to-left)
                    (rotate-up-to-right)))))
    (if (space-empty? d2)
        (cons s1 d2)
        (cons s1 s2))))


(define (start-board-evaluation!)
  (add-new-board-state!)
  (set-falling-puyos!)
  (switch-game-mode! 'evaluating))


(define (progress-evaluation!)
  (switch-game-mode! 'moving))
